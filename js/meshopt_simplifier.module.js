// This file is part of meshoptimizer library and is distributed under the terms of MIT License.
// Copyright (C) 2016-2025, by Arseny Kapoulkine (arseny.kapoulkine@gmail.com)
var MeshoptSimplifier = (function () {
	// Built with clang version 19.1.5-wasi-sdk
	// Built from meshoptimizer 0.24
	var wasm =
		'b9H79Tebbbe:Gez9Geueu9Geub9Gbb9Gsuuuuuuuuuuuu99uueu9Gvuuuuub9Gruuuuuuub9Gouuuuuue999Gvuuuuueu9Gquuuuuuu99uueu9GPuuuuuuuuuuu99uueu9Gquuuuuuuu99ueu9Gruuuuuu99eu9Gwuuuuuu99ueu9Giuuue999Gluuuueu9GiuuueuiXCdilvorlwiDqkxmPbssbelve9Weiiviebeoweuec:G:Pdkr;7eko9TW9T9VV95dbH9F9F939H79T9F9J9H229F9Jt9VV7bbz9TW79O9V9Wt9F79P9T9W29P9M95br8E9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9OcttV9P9I91tW7bw8A9TW79O9V9Wt9F79P9T9W29P9M959x9Pt9O9v9W9K9HtWbDQ9TW79O9V9Wt9F79P9T9W29P9M959t29V9W9W95bqX9TW79O9V9Wt9F79P9T9W29P9M959qV919UWbkQ9TW79O9V9Wt9F79P9T9W29P9M959q9V9P9Ut7bxX9TW79O9V9Wt9F79P9T9W29P9M959t9J9H2Wbma9TW79O9V9Wt9F9V9Wt9P9T9P96W9wWVtW94SWt9J9O9sW9T9H9WbPl79IV9RbsDwebcekdOAq:G;EeCdbk;y9:oYue99luE99Cue9:8Jjjjjbcj;sb9Rgs8Kjjjjbcbhzasc:Cefcbc;Kbz:rjjjb8AdnabaeSmbabaeadcdtz:qjjjb8AkdnamcdGTmbalcrfci4gHcbyd1:jjjbHjjjjbbheasc:Cefasyd;8egOcdtfaeBdbasaOcefBd;8eaecbaHz:rjjjbhAcbhlcbhednadTmbcbhlabheadhHinaAaeydbgOci4fgCaCRbbgCceaOcrGgOtV86bbaCcu7aO4ceGalfhlaeclfheaHcufgHmbkcualcdtalcFFFFi0Ehekaecbyd1:jjjbHjjjjbbhzasc:Cefasyd;8egecdtfazBdbasaecefBd;8ealcd4alfhOcehHinaHgecethHaeaO6mbkcbhXcuaecdtgOaecFFFFi0Ecbyd1:jjjbHjjjjbbhHasc:Cefasyd;8egCcdtfaHBdbasaCcefBd;8eaHcFeaOz:rjjjbhQdnadTmbaecufhLcbhKindndnaQabaXcdtfgYydbgCc:v;t;h;Ev2aLGgOcdtfgAydbgHcuSmbceheinazaHcdtfydbaCSmdaOaefhHaecefheaQaHaLGgOcdtfgAydbgHcu9hmbkkazaKcdtfaCBdbaAaKBdbaKhHaKcefhKkaYaHBdbaXcefgXad9hmbkkaQcbyd:m:jjjbH:bjjjbbasasyd;8ecufBd;8ekcbh8AcualcefgecdtaecFFFFi0Ecbyd1:jjjbHjjjjbbhEasc:Cefasyd;8egecdtfaEBdbasaEBdNeasaecefBd;8ecuadcitadcFFFFe0Ecbyd1:jjjbHjjjjbbh3asc:Cefasyd;8egecdtfa3Bdbasa3Bd:yeasaecefBd;8eascNefabadalcbz:cjjjbcualcdtgealcFFFFi0Eg5cbyd1:jjjbHjjjjbbhHasc:Cefasyd;8egOcdtfaHBdbasaOcefBd;8ea5cbyd1:jjjbHjjjjbbh8Easc:Cefasyd;8egOcdtfa8EBdbasaOcefBd;8eaHa8Eaialavazasc:Cefz:djjjbalcbyd1:jjjbHjjjjbbhAasc:Cefasyd;8egOcdtfaABdbasaOcefBd;8ea5cbyd1:jjjbHjjjjbbhOasc:Cefasyd;8egCcdtfaOBdbasaCcefBd;8ea5cbyd1:jjjbHjjjjbbhCasc:Cefasyd;8egQcdtfaCBdbasaQcefBd;8eaOcFeaez:rjjjbh8FaCcFeaez:rjjjbhadnalTmba3cwfhhindnaEa8AgCcefg8AcdtfydbgQaEaCcdtgefydbgOSmbaQaO9Rhga3aOcitfh8Jaaaefh8Ka8FaefhYcbhLindndna8JaLcitfydbgKaC9hmbaYaCBdba8KaCBdbxekdnaEaKcdtg8LfgeclfydbgOaeydbgeSmba3aecitgQfydbaCSmeaOae9Rh8Maecu7aOfhXahaQfhOcbheinaXaeSmeaecefheaOydbhQaOcwfhOaQaC9hmbkaea8M6mekaaa8LfgeaCaKaeydbcuSEBdbaYaKaCaYydbcuSEBdbkaLcefgLag9hmbkka8Aal9hmbkaHhOa8EhCaahQa8FhLcbheindndnaeaOydbgK9hmbdnaeaCydbgK9hmbaLydbhKdnaQydbgXcu9hmbaKcu9hmbaAaefcb86bbxikdnaXcuSmbaKcuSmbaeaXSmbaHaXcdtfydbaHaKcdtfydb9hmbaAaefcd86bbxikaAaefhYdnaeaXSmbaeaKSmbaYce86bbxikaYcl86bbxdkdnaea8EaKcdtgXfydb9hmbdnaQydbgYcuSmbaeaYSmbaLydbggcuSmbaeagSmbaaaXfydbg8JcuSmba8JaKSmba8FaXfydbgXcuSmbaXaKSmbdnaHaYcdtfydbgKaHaXcdtfydb9hmbaKaHagcdtfydbgXSmbaXaHa8Jcdtfydb9hmbaAaefcd86bbxlkaAaefcl86bbxikaAaefcl86bbxdkaAaefcl86bbxekaAaefaAaKfRbb86bbkaOclfhOaCclfhCaQclfhQaLclfhLalaecefge9hmbkdnaqTmbdndnazTmbazheaHhOalhCindnaqaeydbfRbbTmbaAaOydbfcl86bbkaeclfheaOclfhOaCcufgCmbxdkkaHhealhOindnaqRbbTmbaAaeydbfcl86bbkaqcefhqaeclfheaOcufgOmbkkaHhealhCaAhOindnaAaeydbfRbbcl9hmbaOcl86bbkaeclfheaOcefhOaCcufgCmbkkamceGTmbaAhealhOindnaeRbbce9hmbaecl86bbkaecefheaOcufgOmbkkcbh8Ncualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbh8Masc:Cefasyd;8egecdtfa8MBdbasaecefBd;8easc:qefcbBdbas9cb83i1ea8Maialavazasc1efz:ejjjbhydndnaDmbcbh8PcbhIxekcbhIawhecbhOindnaeIdbJbbbb9ETmbasaIcdtfaOBdbaIcefhIkaeclfheaDaOcefgO9hmbkcuaIal2gecdtaecFFFFi0Ecbyd1:jjjbHjjjjbbh8Pasc:Cefasyd;8egecdtfa8PBdbasaecefBd;8ealTmbdnaImbcbhIxekarcd4hYdnazTmbaIcdthgcbhKa8PhXinaoazaKcdtfydbaY2cdtfhLasheaXhOaIhCinaOaLaeydbcdtgQfIdbawaQfIdbNUdbaeclfheaOclfhOaCcufgCmbkaXagfhXaKcefgKal9hmbxdkkaIcdthgcbhKa8PhXinaoaKaY2cdtfhLasheaXhOaIhCinaOaLaeydbcdtgQfIdbawaQfIdbNUdbaeclfheaOclfhOaCcufgCmbkaXagfhXaKcefgKal9hmbkkcualc8S2gOalc;D;O;f8U0EgQcbyd1:jjjbHjjjjbbheasc:Cefasyd;8egCcdtfaeBdbasaCcefBd;8eaecbaOz:rjjjbhqcbh8Rcbh8SdnaITmbcbh8NaQcbyd1:jjjbHjjjjbbh8Sasc:Cefasyd;8egecdtfa8SBdbasaecefBd;8ea8ScbaOz:rjjjb8AcuaIal2gecltgOaecFFFFb0Ecbyd1:jjjbHjjjjbbh8Rasc:Cefasyd;8egecdtfa8RBdbasaecefBd;8ea8RcbaOz:rjjjb8AamcjjjjdGTmbcualcltgealcFFFFb0Ecbyd1:jjjbHjjjjbbh8Nasc:Cefasyd;8egOcdtfa8NBdbasaOcefBd;8ea8Ncbaez:rjjjb8AkdnadTmbcbhLabhOina8MaOclfydbgKcx2fgeIdba8MaOydbgXcx2fgCIdbgR:tg8Ua8MaOcwfydbgYcx2fgQIdlaCIdlg8V:tg8WNaQIdbaR:tg8XaeIdla8V:tg8YN:tg8Zh80aeIdwaCIdwg81:tgBa8XNaQIdwa81:tg83a8UN:tgUh8Xa8Ya83Na8WaBN:tg8Yh8Udna8Za8ZNa8Ya8YNaUaUNMM:rgBJbbbb9EgCTmba8ZaB:vh80aUaB:vh8Xa8YaB:vh8UkaqaHaXcdtfydbgQc8S2fgea8UaB:rg8Wa8UNNg85aeIdbMUdbaea8Xa8Wa8XNg86Ng87aeIdlMUdlaea80a8Wa80Ng83Ng88aeIdwMUdwaea86a8UNg86aeIdxMUdxaea83a8UNg89aeIdzMUdzaea83a8XNg8:aeIdCMUdCaea8Ua8Wa80a81Na8UaRNa8Va8XNMM:mgZNg83Ng8UaeIdKMUdKaea8Xa83Ng8XaeId3MUd3aea80a83Ng80aeIdaMUdaaea83aZNg83aeId8KMUd8Kaea8WaeIdyMUdyaqaHaKcdtfydbgKc8S2fgea85aeIdbMUdbaea87aeIdlMUdlaea88aeIdwMUdwaea86aeIdxMUdxaea89aeIdzMUdzaea8:aeIdCMUdCaea8UaeIdKMUdKaea8XaeId3MUd3aea80aeIdaMUdaaea83aeId8KMUd8Kaea8WaeIdyMUdyaqaHaYcdtfydbgXc8S2fgea85aeIdbMUdbaea87aeIdlMUdlaea88aeIdwMUdwaea86aeIdxMUdxaea89aeIdzMUdzaea8:aeIdCMUdCaea8UaeIdKMUdKaea8XaeId3MUd3aea80aeIdaMUdaaea83aeId8KMUd8Kaea8WaeIdyMUdydna8NTmbdnaCTmba8ZaB:vh8ZaUaB:vhUa8YaB:vh8Yka8NaQcltfgeaBJbbbZNg8UaUNg8WaeIdlMUdlaea8Ua8ZNg8XaeIdwMUdwaea8Ua8YNg80aeIdbMUdbaea8UaR:ma8YNaUa8VN:ta81a8ZN:tNg8UaeIdxMUdxa8NaKcltfgea8WaeIdlMUdlaea8XaeIdwMUdwaea80aeIdbMUdbaea8UaeIdxMUdxa8NaXcltfgea8WaeIdlMUdlaea8XaeIdwMUdwaea80aeIdbMUdbaea8UaeIdxMUdxkaOcxfhOaLcifgLad6mbkkdnalTmbJ;n;m;m89J:v:;;w8ZamczGEh8YcbhCaHhQa8MhOaqheindnaCaQydb9hmbaecxfgLaLIdbJbbbbMUdbaeczfgLaLIdbJbbbbMUdbaecCfgLaLIdbJbbbbMUdbaea8YaecyfgLIdbg8ZNg8UaeIdbMUdbaeclfgKa8UaKIdbMUdbaecwfgKa8UaKIdbMUdbaecKfgKaKIdbaOIdbg8Xa8UN:tUdbaOcwfIdbh8Waec3fgKaKIdba8UaOclfIdbg80N:tUdbaecafgKaKIdba8Ua8WN:tUdbaec8KfgKIdbhUaLa8Za8UMUdbaKaUa8Ua8Wa8WNa8Xa8XNa80a80NMMNMUdbkaQclfhQaOcxfhOaec8SfhealaCcefgC9hmbkkdnadTmbcbhYabhXinabaYcdtfhKcbhOinaAaKaOc:G1jjbfydbcdtfydbgCfRbbhedndnaAaXaOfydbgQfRbbgLc99fcFeGcpe0mbaec99fcFeGc;:e6mekdnaLcufcFeGce0mba8FaQcdtfydbaC9hmekdnaecufcFeGce0mbaaaCcdtfydbaQ9hmekJbbacJbbacJbbbZaecFeGceSEaLcFeGceSEh88a8MaCcx2fgeIdwa8MaQcx2fgLIdwgB:tg80:mh86aeIdlaLIdlg83:tg8Z:mh89aeIdbaLIdbgR:tgU:mh8:dna8MaKaOc:K1jjbfydbcdtfydbcx2fgeIdwaB:tg8Va80a80NaUaUNa8Za8ZNMMg8YNa8Va80NaeIdbaR:tg81aUNa8ZaeIdla83:tg85NMMg8Wa80N:tg8Xa8XNa81a8YNa8WaUN:tg8Ua8UNa85a8YNa8Wa8ZN:tg8Wa8WNMM:rg87Jbbbb9ETmba8Xa87:vh8Xa8Wa87:vh8Wa8Ua87:vh8Uka88a8Y:rNg8Ya8XaBNa8UaRNa83a8WNMM:mgZNg87aZNhZa8Xa87Nhna8Wa87Nhca8Ua87Nh9ca8Ya8XNg87a8WNhJa87a8UNh9ea8Ya8WNgTa8UNhSa8Xa87Nh87a8WaTNhTa8Ua8Ya8UNNh9hdnaUa85Na81a89NMg8Xa8XNa8Za8VNa85a86NMg8Ua8UNa80a81Na8Va8:NMg8Wa8WNMM:rg80Jbbbb9ETmba8Xa80:vh8Xa8Wa80:vh8Wa8Ua80:vh8UkaqaHaQcdtfydbc8S2fgeaeIdba9ha8Ua88a80:rNg80a8UNNMgUMUdbaeaTa8Wa80a8WNg8VNMg81aeIdlMUdlaea87a8Xa80a8XNg8ZNMg85aeIdwMUdwaeaSa8Va8UNMg8VaeIdxMUdxaea9ea8Za8UNMg87aeIdzMUdzaeaJa8Za8WNMg8ZaeIdCMUdCaea9ca8Ua80a8XaBNa8UaRNa83a8WNMMgB:mNg80NMg8UaeIdKMUdKaeaca8Wa80NMg8WaeId3MUd3aeana8Xa80NMg8XaeIdaMUdaaeaZaBa80N:tg80aeId8KMUd8Kaea8YJbbbbMg8YaeIdyMUdyaqaHaCcdtfydbc8S2fgeaUaeIdbMUdbaea81aeIdlMUdlaea85aeIdwMUdwaea8VaeIdxMUdxaea87aeIdzMUdzaea8ZaeIdCMUdCaea8UaeIdKMUdKaea8WaeId3MUd3aea8XaeIdaMUdaaea80aeId8KMUd8Kaea8YaeIdyMUdykaOclfgOcx9hmbkaXcxfhXaYcifgYad6mbkaITmbcbhXinJbbbbh8Ya8MabaXcdtfgeclfydbgYcx2fgOIdwa8Maeydbggcx2fgCIdwg81:tg8Wa8WNaOIdbaCIdbg85:tg8Xa8XNaOIdlaCIdlg87:tg80a80NMMgRa8Maecwfydbg8Jcx2fgeIdwa81:tg8ZNa8Wa8Wa8ZNa8XaeIdba85:tgUNa80aeIdla87:tgBNMMg8UN:tJbbbbJbbjZaRa8Za8ZNaUaUNaBaBNMMg8VNa8Ua8UN:tg83:va83Jbbbb9BEg83Nh89a8Va8WNa8Za8UN:ta83Nh8:aRaBNa80a8UN:ta83NhZa8Va80NaBa8UN:ta83NhnaRaUNa8Xa8UN:ta83Nhca8Va8XNaUa8UN:ta83Nh9ca8XaBNaUa80N:tg8Ua8UNa80a8ZNaBa8WN:tg8Ua8UNa8WaUNa8Za8XN:tg8Ua8UNMM:rJbbbZNh8Ua8PagaI2g8LcdtfhOa8Pa8JaI2gEcdtfhCa8PaYaI2g8KcdtfhQa81:mhJa87:mh9ea85:mhTcbhLaIhKJbbbbhBJbbbbh83JbbbbhRJbbbbh8VJbbbbh81Jbbbbh85Jbbbbh87Jbbbbh88Jbbbbh86inascjdfaLfgecwfa8Ua8:aQIdbaOIdbg8Z:tg80Na89aCIdba8Z:tgUNMg8WNUdbaeclfa8Uana80NaZaUNMg8XNUdbaea8Ua9ca80NacaUNMg80NUdbaecxfa8UaJa8WNa9ea8XNa8ZaTa80NMMMg8ZNUdba8Ua8Wa8XNNa8VMh8Va8Ua8Wa80NNa81Mh81a8Ua8Xa80NNa85Mh85a8Ua8Za8ZNNa8YMh8Ya8Ua8Wa8ZNNaBMhBa8Ua8Xa8ZNNa83Mh83a8Ua80a8ZNNaRMhRa8Ua8Wa8WNNa87Mh87a8Ua8Xa8XNNa88Mh88a8Ua80a80NNa86Mh86aOclfhOaQclfhQaCclfhCaLczfhLaKcufgKmbka8Sagc8S2fgea86aeIdbMUdbaea88aeIdlMUdlaea87aeIdwMUdwaea85aeIdxMUdxaea81aeIdzMUdzaea8VaeIdCMUdCaeaRaeIdKMUdKaea83aeId3MUd3aeaBaeIdaMUdaaea8YaeId8KMUd8Kaea8UaeIdyMUdya8SaYc8S2fgea86aeIdbMUdbaea88aeIdlMUdlaea87aeIdwMUdwaea85aeIdxMUdxaea81aeIdzMUdzaea8VaeIdCMUdCaeaRaeIdKMUdKaea83aeId3MUd3aeaBaeIdaMUdaaea8YaeId8KMUd8Kaea8UaeIdyMUdya8Sa8Jc8S2fgea86aeIdbMUdbaea88aeIdlMUdlaea87aeIdwMUdwaea85aeIdxMUdxaea81aeIdzMUdzaea8VaeIdCMUdCaeaRaeIdKMUdKaea83aeId3MUd3aeaBaeIdaMUdaaea8YaeId8KMUd8Kaea8UaeIdyMUdya8Ra8LcltfhKcbhOaIhQinaKaOfgeascjdfaOfgCIdbaeIdbMUdbaeclfgLaCclfIdbaLIdbMUdbaecwfgLaCcwfIdbaLIdbMUdbaecxfgeaCcxfIdbaeIdbMUdbaOczfhOaQcufgQmbka8Ra8KcltfhKcbhOaIhQinaKaOfgeascjdfaOfgCIdbaeIdbMUdbaeclfgLaCclfIdbaLIdbMUdbaecwfgLaCcwfIdbaLIdbMUdbaecxfgeaCcxfIdbaeIdbMUdbaOczfhOaQcufgQmbka8RaEcltfhKcbhOaIhQinaKaOfgeascjdfaOfgCIdbaeIdbMUdbaeclfgLaCclfIdbaLIdbMUdbaecwfgLaCcwfIdbaLIdbMUdbaecxfgeaCcxfIdbaeIdbMUdbaOczfhOaQcufgQmbkaXcifgXad6mbkkcbhCdndnamcwGg9imbJbbbbhRcbh6cbh9kcbh0xekcbh6a5cbyd1:jjjbHjjjjbbh0asc:Cefasyd;8egecdtfa0BdbasaecefBd;8ecua0alabadaHz:fjjjbgQcltaQcjjjjiGEcbyd1:jjjbHjjjjbbh9kasc:Cefasyd;8egecdtfa9kBdbasaecefBd;8ea9kaQa0a8Malz:gjjjbJFFuuhRaQTmba9kheaQhOinaeIdbg8UaRaRa8U9EEhRaeclfheaOcufgOmbkaQh6kasydNeh9mdnalTmba9mclfhea9mydbhQaAhOalhLcbhCincbaeydbgKaQ9RaORbbcpeGEaCfhCaOcefhOaeclfheaKhQaLcufgLmbkaCce4hCkcuadaC9Rcifg9ncx2a9nc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbhDasc:Cefasyd;8egecdtfaDBdbasaecefBd;8ecua9ncdta9ncFFFFi0Ecbyd1:jjjbHjjjjbbh9oasc:Cefasyd;8egecdtfa9oBdbasaecefBd;8ea5cbyd1:jjjbHjjjjbbhhasc:Cefasyd;8egecdtfahBdbasaecefBd;8ealcbyd1:jjjbHjjjjbbh9pasc:Cefasyd;8egecdtfa9pBdbasaecefBd;8eaxaxNayJbbjZamclGEgnanN:vh88Jbbbbh86dndndndndndnadak9nmba9nci6measyd:yeh9qaIclth9raDcwfh9sJbbbbh87Jbbbbh86inascNefabadalaHz:cjjjbabhgcbh8Acbh5inaba5cdtfh8JcbheindnaHagaefydbgCcdtgYfydbgLaHa8Jaec:W1jjbfydbcdtfydbgOcdtg8LfydbgKSmbaAaOfRbbgXcv2aAaCfRbbgQfc;a1jjbfRbbg8KaQcv2aXfgEc;a1jjbfRbbg3VcFeGTmbdnaKaL9nmbaEc;G1jjbfRbbcFeGmekaQcufhLdnaQaX9hmbaLcFeGce0mba8FaYfydbaO9hmekdndnaQclSmbaXcl9hmekdnaLcFeGce0mba8FaYfydbaO9hmdkaXcufcFeGce0mbaaa8LfydbaC9hmekaDa8Acx2fgQaOaCa3cFeGgLEBdlaQaCaOaLEBdbaQaLa8KGcb9hBdwa8Acefh8Akaeclfgecx9hmbkdna5cifg5ad9pmbagcxfhga8Acifa9n9nmekka8ATmecbhXinaqaHaDaXcx2fgQydbgLcdtggfydbc8S2fgeIdwa8MaQydlgKcx2fgOIdwg8XNaeIdzaOIdbg80NaeIdaMg8Ua8UMMa8XNaeIdlaOIdlg8ZNaeIdCa8XNaeId3Mg8Ua8UMMa8ZNaeIdba80NaeIdxa8ZNaeIdKMg8Ua8UMMa80NaeId8KMMM:lh8UJbbbbJbbjZaeIdyg8W:va8WJbbbb9BEh8WdndnaQydwgYmbJFFuuhBxekJbbbbJbbjZaqaHaKcdtfydbc8S2fgeIdygU:vaUJbbbb9BEaeIdwa8MaLcx2fgOIdwgUNaeIdzaOIdbg8YNaeIdaMgBaBMMaUNaeIdlaOIdlgBNaeIdCaUNaeId3MgUaUMMaBNaeIdba8YNaeIdxaBNaeIdKMgUaUMMa8YNaeId8KMMM:lNhBka8Wa8UNh83dnaITmba8SaLc8S2fgCIdwa8XNaCIdza80NaCIdaMg8Ua8UMMa8XNaCIdla8ZNaCIdCa8XNaCId3Mg8Ua8UMMa8ZNaCIdba80NaCIdxa8ZNaCIdKMg8Ua8UMMa80NaCId8KMMMh8Ua8PaKaI2g8JcdtfhOa8RaLaI2g8LcltfheaCIdyhUaIhCinaOIdbg8Wa8WaUNaecxfIdba8XaecwfIdbNa80aeIdbNa8ZaeclfIdbNMMMg8Wa8WM:tNa8UMh8UaOclfhOaeczfheaCcufgCmbkdndnaYmbJbbbbh8Wxeka8SaKc8S2fgCIdwa8MaLcx2fgeIdwg80NaCIdzaeIdbg8ZNaCIdaMg8Wa8WMMa80NaCIdlaeIdlgUNaCIdCa80NaCId3Mg8Wa8WMMaUNaCIdba8ZNaCIdxaUNaCIdKMg8Wa8WMMa8ZNaCId8KMMMh8Wa8Pa8LcdtfhOa8Ra8JcltfheaCIdyh8YaIhCinaOIdbg8Xa8Xa8YNaecxfIdba80aecwfIdbNa8ZaeIdbNaUaeclfIdbNMMMg8Xa8XM:tNa8WMh8WaOclfhOaeczfheaCcufgCmbka8W:lh8Wka83a8U:lMh83aBa8WMhBaAaLfRbbcd9hmbdnaaa8Fa8FagfydbaKSEa8Eagfydbg8Jcdtfydbggcu9hmba8EaKcdtfydbhgka8Sa8Jc8S2fgCIdwa8Magcx2fgeIdwg8XNaCIdzaeIdbg80NaCIdaMg8Ua8UMMa8XNaCIdlaeIdlg8ZNaCIdCa8XNaCId3Mg8Ua8UMMa8ZNaCIdba80NaCIdxa8ZNaCIdKMg8Ua8UMMa80NaCId8KMMMh8Ua8PagaI2g8LcdtfhOa8Ra8JaI2gEcltfheaCIdyhUaIhCinaOIdbg8Wa8WaUNaecxfIdba8XaecwfIdbNa80aeIdbNa8ZaeclfIdbNMMMg8Wa8WM:tNa8UMh8UaOclfhOaeczfheaCcufgCmbkdndnaYmbJbbbbh8Wxeka8Sagc8S2fgCIdwa8Ma8Jcx2fgeIdwg80NaCIdzaeIdbg8ZNaCIdaMg8Wa8WMMa80NaCIdlaeIdlgUNaCIdCa80NaCId3Mg8Wa8WMMaUNaCIdba8ZNaCIdxaUNaCIdKMg8Wa8WMMa8ZNaCId8KMMMh8Wa8PaEcdtfhOa8Ra8LcltfheaCIdyh8YaIhCinaOIdbg8Xa8Xa8YNaecxfIdba80aecwfIdbNa8ZaeIdbNaUaeclfIdbNMMMg8Xa8XM:tNa8WMh8WaOclfhOaeczfheaCcufgCmbka8W:lh8Wka83a8U:lMh83aBa8WMhBkaQa83aBa83aB9FgeEUdwaQaKaLaeaYTVgeEBdlaQaLaKaeEBdbaXcefgXa8A9hmbkascjdfcbcj;qbz:rjjjb8Aa9shea8AhOinascjdfaeydbcA4cF8FGgCcFAaCcFA6EcdtfgCaCydbcefBdbaecxfheaOcufgOmbkcbhecbhOinascjdfaefgCydbhQaCaOBdbaQaOfhOaeclfgecj;qb9hmbkcbhea9shOinascjdfaOydbcA4cF8FGgCcFAaCcFA6EcdtfgCaCydbgCcefBdba9oaCcdtfaeBdbaOcxfhOa8Aaecefge9hmbkadak9RgCci9Uh9tdnalTmbcbheahhOinaOaeBdbaOclfhOalaecefge9hmbkkcbh9ua9pcbalz:rjjjbh5aCcO9Uh9va9tce4h9wcbh3cbh8KdninaDa9oa8Kcdtfydbcx2fgEIdwg8Ua889Emea3a9t9pmeJFFuuh8Wdna9wa8A9pmbaDa9oa9wcdtfydbcx2fIdwJbb;aZNh8Wkdna8Ua8W9ETmba8Ua869ETmba3a9v0mdkdna5aHaEydlg8Jcdtg9xfydbgQfg9yRbba5aHaEydbggcdtg9zfydbgefg9ARbbVmbaAagfRbbh9Bdna9maecdtfgOclfydbgCaOydbgOSmbaCaO9RhLa8MaQcx2fhXa8Maecx2fhYa9qaOcitfhecbhOceh8LdnindnahaeydbcdtfydbgCaQSmbahaeclfydbcdtfydbgKaQSmbaCaKSmba8MaKcx2fgKIdba8MaCcx2fgCIdbg8X:tg8UaYIdlaCIdlg80:tg8YNaYIdba8X:tgBaKIdla80:tg8WN:tg8Za8UaXIdla80:tg83NaXIdba8X:tg8Va8WN:tg80Na8WaYIdwaCIdwgU:tg81Na8YaKIdwaU:tg8XN:tg8Ya8WaXIdwaU:tg85Na83a8XN:tg8WNa8XaBNa81a8UN:tgUa8Xa8VNa85a8UN:tg8UNMMa8Za8ZNa8Ya8YNaUaUNMMa80a80Na8Wa8WNa8Ua8UNMMN:rJbbj8:N9FmdkaecwfheaOcefgOaL6h8LaLaO9hmbkka8LceGTmba9wcefh9wxekdndndndna9Bc9:fPdebdkagheinahaecdtgefa8JBdba8Eaefydbgeag9hmbxikkdnaaa8Fa8Fa9zfydba8JSEa8Ea9zfydbggcdtfydbgecu9hmba8Ea9xfydbhekaha9zfa8JBdbaeh8Jkahagcdtfa8JBdbka9Ace86bba9yce86bbaEIdwg8Ua86a86a8U9DEh86a9ucefh9ucecda9BceSEa3fh3ka8Kcefg8Ka8A9hmbkka9uTmednalTmbcbhKcbhYindnahaYcdtgefydbgCaYSmbaHaCcdtfydbhgdnaYaHaefydb9hg8Jmbaqagc8S2fgeaqaYc8S2fgOIdbaeIdbMUdbaeaOIdlaeIdlMUdlaeaOIdwaeIdwMUdwaeaOIdxaeIdxMUdxaeaOIdzaeIdzMUdzaeaOIdCaeIdCMUdCaeaOIdKaeIdKMUdKaeaOId3aeId3MUd3aeaOIdaaeIdaMUdaaeaOId8KaeId8KMUd8KaeaOIdyaeIdyMUdya8NTmba8Nagcltfgea8NaYcltfgOIdbaeIdbMUdbaeaOIdlaeIdlMUdlaeaOIdwaeIdwMUdwaeaOIdxaeIdxMUdxkaITmba8SaCc8S2fgea8SaYc8S2g8LfgOIdbaeIdbMUdbaeaOIdlaeIdlMUdlaeaOIdwaeIdwMUdwaeaOIdxaeIdxMUdxaeaOIdzaeIdzMUdzaeaOIdCaeIdCMUdCaeaOIdKaeIdKMUdKaeaOId3aeId3MUd3aeaOIdaaeIdaMUdaaeaOId8KaeId8KMUd8KaeaOIdyaeIdyMUdya9raC2hXa8RhOaIhQinaOaXfgeaOaKfgCIdbaeIdbMUdbaeclfgLaCclfIdbaLIdbMUdbaecwfgLaCcwfIdbaLIdbMUdbaecxfgeaCcxfIdbaeIdbMUdbaOczfhOaQcufgQmbka8JmbJbbbbJbbjZaqa8LfgeIdyg8U:va8UJbbbb9BEaeIdwa8Magcx2fgOIdwg8UNaeIdzaOIdbg8WNaeIdaMg8Xa8XMMa8UNaeIdlaOIdlg8XNaeIdCa8UNaeId3Mg8Ua8UMMa8XNaeIdba8WNaeIdxa8XNaeIdKMg8Ua8UMMa8WNaeId8KMMM:lNg8Ua87a87a8U9DEh87kaKa9rfhKaYcefgYal9hmbkcbhOa8FheindnaeydbgCcuSmbdnaOahaCcdtgQfydbgC9hmbcuhCa8FaQfydbgQcuSmbahaQcdtfydbhCkaeaCBdbkaeclfhealaOcefgO9hmbkcbhOaaheindnaeydbgCcuSmbdnaOahaCcdtgQfydbgC9hmbcuhCaaaQfydbgQcuSmbahaQcdtfydbhCkaeaCBdbkaeclfhealaOcefgO9hmbkka87a86aIEh87cbhQabhecbhLindnahaeydbcdtfydbgOahaeclfydbcdtfydbgCSmbaOahaecwfydbcdtfydbgKSmbaCaKSmbabaQcdtfgXaOBdbaXcwfaKBdbaXclfaCBdbaQcifhQkaecxfheaLcifgLad6mbkdndna9imbaQhdxekdnaQak0mbaQhdxekdnaRa879FmbaQhdxekJFFuuhRcbhdabhecbhOindna9ka0aeydbgCcdtfydbcdtfIdbg8Ua879ETmbaeclf8Pdbh9CabadcdtfgLaCBdbaLclfa9C83dba8UaRaRa8U9EEhRadcifhdkaecxfheaOcifgOaQ6mbkkadak0mbkkadmecbhCamcjjjjdGTmlcbhga9pcbalz:rjjjb8AxdkascNefabadalaHz:cjjjbJbbbbh86kcbhLabhecbhOindnaHaeydbgKcdtfydbgCaHaeclfydbgXcdtfydbgQSmbaCaHaecwfydbggcdtfydbgYSmbaQaYSmbabaLcdtfgCaKBdbaCcwfagBdbaCclfaXBdbaLcifhLkaecxfheaOcifgOad6mbkdndna9imbaLhCxekdnaLak0mbaLhCxekdnaRa889FmbaLhCxekcehXinaRJbb;aZNg8Ua88a8Ua889DEh8XJbbbbh8Udna6Tmba9khea6hOinaeIdbg8Wa8Ua8Wa8X9FEa8Ua8Wa8U9EEh8UaeclfheaOcufgOmbkkJFFuuhRcbhCabhecbhOindna9ka0aeydbgQcdtfydbcdtfIdbg8Wa8X9ETmbaeclf8Pdbh9CabaCcdtfgKaQBdbaKclfa9C83dba8WaRaRa8W9EEhRaCcifhCkaecxfheaOcifgOaL6mbkdnaXaCaL9hVceGmbaLhCxdka8Ua86a86a8U9DEh86aCak9nmecbhXaChLaRa889FmbkkamcjjjjdGTmecbhga9pcbalz:rjjjbhLaCTmbabheaChOinaLaeydbgQfaAaQfRbbcl9h86bbaeclfheaOcufgOmbkaChgkascNefabagalaHz:cjjjbdnalTmbcbhQasyd:yehYindna9paQfRbbTmbdnaAaQfRbbgecl0mbceaetcQGmekdnaHaQcdtgLfydbgeaQSmba8MaQcx2fgOa8Maecx2fge8Pdb83dbaOcwfaecwfydbBdbxekaqaQc8S2fgeIdyh88aeIdahRaeId3h8VaeIdKh8YaeIdCh81aeIdzhBaeIdxh83aeIdwh85aeIdlh87aeIdbhUJbbbbh89dndnaITmbaQhCinJbbbba88a8SaCc8S2fgOIdyg8U:va8UJbbbb9BEh8Ua8RaCaI2cltfheaOIdaa88NaRMhRaOId3a88Na8VMh8VaOIdKa88Na8YMh8YaOIdCa88Na81Mh81aOIdza88NaBMhBaOIdxa88Na83Mh83aOIdwa88Na85Mh85aOIdla88Na87Mh87aOIdba88NaUMhUaIhOinaRaecxfIdbg8ZaecwfIdbg8WNa8UN:thRa8Va8ZaeclfIdbg8XNa8UN:th8Va81a8Wa8XNa8UN:th81aUaeIdbg80a80Na8UN:thUa8Ya8Za80Na8UN:th8YaBa8Wa80Na8UN:thBa83a8Xa80Na8UN:th83a85a8Wa8WNa8UN:th85a87a8Xa8XNa8UN:th87aeczfheaOcufgOmbka8EaCcdtfydbgCaQ9hmbka8NTmba8NaQcltfgeIdxh9caeIdwhZaeIdlh8:aeIdbh8UxekJbbbbh8UJbbbbh8:JbbbbhZJbbbbh9ckaBaU:vg8Xa8YNaR:ta81aBa83aU:vg8WN:tgRa87a83a8WN:tg8Z:vg80a8Wa8YNa8V:tg8VN:th81aZa8Ua8XN:ta8:a8Ua8WN:tg83a80N:tg87a85aBa8XN:taRa80N:tgB:vgR:mh85a83a8Z:vg8::mhZdnJbbbba8Ua8UaU:vgcN:ta83a8:N:ta87aRN:tg83:la88J:v:;;w8ZNg8U9ETmba85a81NaZa8VNaca8YNa9c:tMMa83:vh89kaU:la8U9ETmba8Z:la8U9ETmbaB:la8U9ETmbac:ma89Na8X:ma85a89Na81aB:vMg85Na8W:maZa89Na80:ma85Na8Va8Z:vMMg87Na8Y:maU:vMMMh88dna9maLfgeclfydbgOaeydbgeSmbaOae9RhKaYaecitfhea8MaQcx2fgOIdwh89aOIdlh8:aOIdbhZcbhLcehXdnina8Maeclfydbcx2fgOIdba8Maeydbcx2fgCIdbg8X:tg8Ua8:aCIdlg80:tg8YNaZa8X:tgBaOIdla80:tg8WN:tg8Za8Ua87a80:tg83Na88a8X:tgRa8WN:tg80Na8Wa89aCIdwgU:tg8VNa8YaOIdwaU:tg8XN:tg8Ya8Wa85aU:tg81Na83a8XN:tg8WNa8XaBNa8Va8UN:tgUa8XaRNa81a8UN:tg8UNMMa8Za8ZNa8Ya8YNaUaUNMMa80a80Na8Wa8WNa8Ua8UNMMN:rJbbj8:N9FmeaecwfheaLcefgLaK6hXaKaL9hmbkkaXceGmeka8MaQcx2fgea85Udwaea87Udlaea88UdbkaQcefgQal9hmbkdndnaITmbaIclthXaIcdthYcbhLa8PhKindna9paLfRbbTmbaAaLfRbbclSmbJbbbbJbbjZa8SaLc8S2fIdyg8U:va8UJbbbb9BEh8Ua8MaHaLcdtfydbcx2fhOa8RheaKhCaIhQinaCa8UaecwfIdbaOIdwNaeIdbaOIdbNaeclfIdbaOIdlNMMaecxfIdbMNUdbaeczfheaCclfhCaQcufgQmbkka8RaXfh8RaKaYfhKaLcefgLal9hmbkarcd4hKavcd4hXasId:qeh8UasId:meh8WasId1eh8XazTmeaIcdthYcbhLindna9paLfRbbTmbaiazaLcdtfydbgOaX2cdtfgea8MaLcx2fgHIdbayNa8XMUdbaeaHIdlayNa8WMUdlaeaHIdwayNa8UMUdwaoaOaK2cdtfhQashea8PhHaIhOinaQaeydbcdtgCfaHIdbawaCfIdb:vUdbaeclfheaHclfhHaOcufgOmbkka8PaYfh8PaLcefgLal9hmbxikkavcd4hOasId:qeh8UasId:meh8WasId1eh8XdnazTmbazheindna9pRbbTmbaiaeydbaO2cdtfgHa8MIdbayNa8XMUdbaHa8MclfIdbayNa8WMUdlaHa8McwfIdbayNa8UMUdwka9pcefh9paeclfhea8Mcxfh8MalcufglmbxikkaOcdtheindna9pRbbTmbaia8MIdbayNa8XMUdbaiclfa8MclfIdbayNa8WMUdbaicwfa8McwfIdbayNa8UMUdbka9pcefh9pa8Mcxfh8MaiaefhialcufglmbxdkkaIcdthYcbhLindna9paLfRbbTmbaiaLaX2cdtfgea8MaLcx2fgHIdbayNa8XMUdbaeaHIdlayNa8WMUdlaeaHIdwayNa8UMUdwaoaLaK2cdtfhQashea8PhHaIhOinaQaeydbcdtgCfaHIdbawaCfIdb:vUdbaeclfheaHclfhHaOcufgOmbkka8PaYfh8PaLcefgLal9hmbkkaghCkdnamcjjjjlGTmbazmbaCTmbcbhKabheinaAaeydbgQfRbbc3thXaecwfgYydbhHdndna8FaQcdtg8JfydbaeclfggydbgOSmbcbhLaaaOcdtfydbaQ9hmekcjjjj94hLkaeaXaLVaQVBdbaAaOfRbbc3thXdndna8FaOcdtfydbaHSmbcbhLaaaHcdtfydbaO9hmekcjjjj94hLkagaXaLVaOVBdbaAaHfRbbc3thLdndna8FaHcdtfydbaQSmbcbhOaaa8JfydbaH9hmekcjjjj94hOkaYaLaOVaHVBdbaecxfheaKcifgKaC6mbkkazTmbaCTmbaCheinabazabydbcdtfydbBdbabclfhbaecufgembkkdnaPTmbaPana86:rNUdbkasyd;8egecdtasc:Ceffc98fhHdninaeTmeaHydbcbyd:m:jjjbH:bjjjbbaHc98fhHaecufhexbkkascj;sbf8KjjjjbaCk;Yieouabydlhvabydbclfcbaicdtz:rjjjbhoadci9UhrdnadTmbdnalTmbaehwadhDinaoalawydbcdtfydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbxdkkaehwadhDinaoawydbcdtfgqaqydbcefBdbawclfhwaDcufgDmbkkdnaiTmbcbhDaohwinawydbhqawaDBdbawclfhwaqaDfhDaicufgimbkkdnadci6mbinaecwfydbhwaeclfydbhDaeydbhidnalTmbalawcdtfydbhwalaDcdtfydbhDalaicdtfydbhikavaoaicdtfgqydbcitfaDBdbavaqydbcitfawBdlaqaqydbcefBdbavaoaDcdtfgqydbcitfawBdbavaqydbcitfaiBdlaqaqydbcefBdbavaoawcdtfgwydbcitfaiBdbavawydbcitfaDBdlawawydbcefBdbaecxfhearcufgrmbkkabydbcbBdbk:todDue99aicd4aifhrcehwinawgDcethwaDar6mbkcuaDcdtgraDcFFFFi0Ecbyd1:jjjbHjjjjbbhwaoaoyd9GgqcefBd9GaoaqcdtfawBdbawcFearz:rjjjbhkdnaiTmbalcd4hlaDcufhxcbhminamhDdnavTmbavamcdtfydbhDkcbadaDal2cdtfgDydlgwawcjjjj94SEgwcH4aw7c:F:b:DD2cbaDydbgwawcjjjj94SEgwcH4aw7c;D;O:B8J27cbaDydwgDaDcjjjj94SEgDcH4aD7c:3F;N8N27axGhwamcdthPdndndnavTmbakawcdtfgrydbgDcuSmeadavaPfydbal2cdtfgsIdbhzcehqinaqhrdnadavaDcdtfydbal2cdtfgqIdbaz9CmbaqIdlasIdl9CmbaqIdwasIdw9BmlkarcefhqakawarfaxGgwcdtfgrydbgDcu9hmbxdkkakawcdtfgrydbgDcuSmbadamal2cdtfgsIdbhzcehqinaqhrdnadaDal2cdtfgqIdbaz9CmbaqIdlasIdl9CmbaqIdwasIdw9BmikarcefhqakawarfaxGgwcdtfgrydbgDcu9hmbkkaramBdbamhDkabaPfaDBdbamcefgmai9hmbkkakcbyd:m:jjjbH:bjjjbbaoaoyd9GcufBd9GdnaeTmbaiTmbcbhDaehwinawaDBdbawclfhwaiaDcefgD9hmbkcbhDaehwindnaDabydbgrSmbawaearcdtfgrydbBdbaraDBdbkawclfhwabclfhbaiaDcefgD9hmbkkk:hrdvuv998Jjjjjbca9Rgoczfcwfcbyd11jjbBdbaocb8Pdj1jjb83izaocwfcbydN1jjbBdbaocb8Pd:m1jjb83ibdnadTmbaicd4hrdnabmbdnalTmbcbhwinaealawcdtfydbar2cdtfhDcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkawcefgwad9hmbxikkarcdthwcbhDincbhiinaoczfaifgqaeaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkaeawfheaDcefgDad9hmbxdkkdnalTmbcbhwinabawcx2fgiaealawcdtfydbar2cdtfgDIdbUdbaiaDIdlUdlaiaDIdwUdwcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkawcefgwad9hmbxdkkarcdthlcbhwaehDinabawcx2fgiaeawar2cdtfgqIdbUdbaiaqIdlUdlaiaqIdwUdwcbhiinaoczfaifgqaDaifIdbgkaqIdbgxaxak9EEUdbaoaifgqakaqIdbgxaxak9DEUdbaiclfgicx9hmbkaDalfhDawcefgwad9hmbkkJbbbbaoIdbaoIdzgx:tgkakJbbbb9DEgkaoIdlaoIdCgm:tgPaPak9DEgkaoIdwaoIdKgP:tgsasak9DEhsdnabTmbadTmbJbbbbJbbjZas:vasJbbbb9BEhkinabakabIdbax:tNUdbabclfgoakaoIdbam:tNUdbabcwfgoakaoIdbaP:tNUdbabcxfhbadcufgdmbkkdnavTmbavaPUdwavamUdlavaxUdbkask:ZlewudnaeTmbcbhvabhoinaoavBdbaoclfhoaeavcefgv9hmbkkdnaiTmbcbhrinadarcdtfhwcbhDinalawaDcdtgvc:G1jjbfydbcdtfydbcdtfydbhodnabalawavfydbcdtfydbgqcdtfgkydbgvaqSmbinakabavgqcdtfgxydbgvBdbaxhkaqav9hmbkkdnabaocdtfgkydbgvaoSmbinakabavgocdtfgxydbgvBdbaxhkaoav9hmbkkdnaqaoSmbabaqaoaqao0Ecdtfaqaoaqao6EBdbkaDcefgDci9hmbkarcifgrai6mbkkdnaembcbskcbhxindnalaxcdtgvfydbax9hmbaxhodnabavfgDydbgvaxSmbaDhqinaqabavgocdtfgkydbgvBdbakhqaoav9hmbkkaDaoBdbkaxcefgxae9hmbkcbhvabhocbhkindndnavalydbgq9hmbdnavaoydbgq9hmbaoakBdbakcefhkxdkaoabaqcdtfydbBdbxekaoabaqcdtfydbBdbkaoclfhoalclfhlaeavcefgv9hmbkakk;Jiilud99duabcbaecltz:rjjjbhvdnalTmbadhoaihralhwinarcwfIdbhDarclfIdbhqavaoydbcltfgkarIdbakIdbMUdbakclfgxaqaxIdbMUdbakcwfgxaDaxIdbMUdbakcxfgkakIdbJbbjZMUdbaoclfhoarcxfhrawcufgwmbkkdnaeTmbavhraehkinarcxfgoIdbhDaocbBdbararIdbJbbbbJbbjZaD:vaDJbbbb9BEgDNUdbarclfgoaDaoIdbNUdbarcwfgoaDaoIdbNUdbarczfhrakcufgkmbkkdnalTmbinavadydbcltfgrcxfgkaicwfIdbarcwfIdb:tgDaDNaiIdbarIdb:tgDaDNaiclfIdbarclfIdb:tgDaDNMMgDakIdbgqaqaD9DEUdbadclfhdaicxfhialcufglmbkkdnaeTmbavcxfhrinabarIdbUdbarczfhrabclfhbaecufgembkkk8MbabaeadaialavcbcbcbcbcbaoarawaDz:bjjjbk8MbabaeadaialavaoarawaDaqakaxamaPz:bjjjbkRbababaeadaialavaoarawaDaqakaxcjjjjdVamz:bjjjbk;48Joque99due99iuq998Jjjjjbc;Wb9Rgq8Kjjjjbcbhkaqcxfcbc;Kbz:rjjjb8Aaqcualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbgxBdxaqceBd2axaialavcbcbz:ejjjb8AaqcualcdtalcFFFFi0Egmcbyd1:jjjbHjjjjbbgiBdzaqcdBd2adci9UhParco9UhsdndnJbbjZJ9VO:d86awawJ9VO:d869DE:vgw:lJbbb9p9DTmbaw:Ohzxekcjjjj94hzkdndnaombazcd9imekdnalTmbazcuf:YhwdnaoTmbcbhvaihHaxhOindndnaoavfRbbTmbavcjjjjlVhAxekdndnaOclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcqthAdndnaOcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaAaXVhAdndnaOIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaAaXcCtVhAkaHaABdbaHclfhHaOcxfhOalavcefgv9hmbxdkkaxhvaihOalhHindndnavIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcCthAdndnavclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaXcqtaAVhAdndnavcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhXxekcjjjj94hXkaOaAaXVBdbavcxfhvaOclfhOaHcufgHmbkkadTmbcbhkaehvcbhOinakaiavclfydbcdtfydbgHaiavcwfydbcdtfydbgA9haiavydbcdtfydbgXaH9haXaA9hGGfhkavcxfhvaOcifgOad6mbkkarci9UhQdndnas:Z:rJbbbZMgw:lJbbb9p9DTmbaw:Ohvxekcjjjj94hvkaQ:ZhLcbhKc:bwhHdndninaPhYaHhXazhrakg8AaQ9pmeaXar9Rcd9imeavaXcufavaX9iEarcefavar9kEhsdnalTmbascuf:YhwdnaoTmbcbhvaihzaxhOindndnaoavfRbbTmbavcjjjjlVhHxekdndnaOclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhHxekcjjjj94hHkaHcqthHdndnaOcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaHaPVhHdndnaOIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaHaPcCtVhHkazaHBdbazclfhzaOcxfhOalavcefgv9hmbxdkkaxhvaihOalhzindndnavIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhHxekcjjjj94hHkaHcCthHdndnavclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaPcqtaHVhHdndnavcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaOaHaPVBdbavcxfhvaOclfhOazcufgzmbkkcbhOdnadTmbaehvcbhzinaOaiavclfydbcdtfydbgHaiavcwfydbcdtfydbgP9haiavydbcdtfydbgAaH9haAaP9hGGfhOavcxfhvazcifgzad6mbkkaYhPaOhkaXhHashzdnaOaQ9nmbaOhPa8AhkashHarhzkdndnaKcl0mbdnaY:Zgwa8A:ZgC:tas:YgEar:Y:tg3aEaX:Y:tg5aO:Zg8EaL:tNNNawaL:ta5NaCa8E:tNaCaL:ta3Na8Eaw:tNM:vaEMJbbbZMgw:lJbbb9p9DTmbaw:Ohvxdkcjjjj94hvxekazaHfcd9ThvkaKcefgKcs9hmbxdkka8AhkarhzkdndndnakmbJbbjZhwcbhicdhvaDmexdkalcd4alfhHcehOinaOgvcethOavaH6mbkcbhOaqcuavcdtgravcFFFFi0Ecbyd1:jjjbHjjjjbbgsBdCaqciBd2aqamcbyd1:jjjbHjjjjbbgXBdKaqclBd2dndndndnalTmbazcuf:YhwaoTmecbhOaihHaxhzindndnaoaOfRbbTmbaOcjjjjlVhPxekdndnazclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaPcqthPdndnazcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaPaAVhPdndnazIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaPaAcCtVhPkaHaPBdbaHclfhHazcxfhzalaOcefgO9hmbxikkascFearz:rjjjb8AcbhrcbhvxdkaxhOaihzalhHindndnaOIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhPxekcjjjj94hPkaPcCthPdndnaOclfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkaAcqtaPVhPdndnaOcwfIdbawNJbbbZMgC:lJbbb9p9DTmbaC:OhAxekcjjjj94hAkazaPaAVBdbaOcxfhOazclfhzaHcufgHmbkkascFearz:rjjjbhAavcufhocbhrcbhsindndndnaAaiascdtgKfydbgHcm4aH7c:v;t;h;Ev2gvcs4av7aoGgzcdtfgPydbgOcuSmbcehvinaiaOcdtgOfydbaHSmdazavfhOavcefhvaAaOaoGgzcdtfgPydbgOcu9hmbkkaPasBdbarhvarcefhrxekaXaOfydbhvkaXaKfavBdbascefgsal9hmbkcuarc8S2gOarc;D;O;f8U0EhvkcbhAaqavcbyd1:jjjbHjjjjbbgvBd3aqcvBd2avcbaOz:rjjjbhOdnadTmbaehiinJbbnnJbbjZaXaiydbgHcdtfydbgvaXaiclfydbgzcdtfydbgsSavaXaicwfydbgPcdtfydbgKSGgoEh8Fdnaxazcx2fgzIdbaxaHcx2fgHIdbg8E:tgCaxaPcx2fgPIdlaHIdlg3:tgwNaPIdba8E:tgEazIdla3:tgaN:tgLaLNaaaPIdwaHIdwg5:tghNawazIdwa5:tgaN:tgwawNaaaENahaCN:tgCaCNMM:rgEJbbbb9ETmbaLaE:vhLaCaE:vhCawaE:vhwkaOavc8S2fgvavIdbawa8FaE:rNgEawNNgaMUdbavaCaEaCNghNggavIdlMUdlavaLaEaLNg8FNg8JavIdwMUdwavahawNghavIdxMUdxava8FawNg8KavIdzMUdzava8FaCNg8FavIdCMUdCavawaEaLa5Nawa8ENa3aCNMM:mg3Ng8ENgwavIdKMUdKavaCa8ENgCavId3MUd3avaLa8ENgLavIdaMUdaava8Ea3Ng8EavId8KMUd8KavaEavIdyMUdydnaombaOasc8S2fgvaaavIdbMUdbavagavIdlMUdlava8JavIdwMUdwavahavIdxMUdxava8KavIdzMUdzava8FavIdCMUdCavawavIdKMUdKavaCavId3MUd3avaLavIdaMUdaava8EavId8KMUd8KavaEavIdyMUdyaOaKc8S2fgvaaavIdbMUdbavagavIdlMUdlava8JavIdwMUdwavahavIdxMUdxava8KavIdzMUdzava8FavIdCMUdCavawavIdKMUdKavaCavId3MUd3avaLavIdaMUdaava8EavId8KMUd8KavaEavIdyMUdykaicxfhiaAcifgAad6mbkkcbhHaqcuarcdtgvarcFFFFi0Egicbyd1:jjjbHjjjjbbgzBdaaqcoBd2aqaicbyd1:jjjbHjjjjbbgiBd8KaqcrBd2azcFeavz:rjjjbhsdnalTmbaXhzinJbbbbJbbjZaOazydbgPc8S2fgvIdygw:vawJbbbb9BEavIdwaxcwfIdbgwNavIdzaxIdbgCNavIdaMgLaLMMawNavIdlaxclfIdbgLNavIdCawNavId3MgwawMMaLNavIdbaCNavIdxaLNavIdKMgwawMMaCNavId8KMMM:lNhwdndnasaPcdtgvfgPydbcuSmbaiavfIdbaw9ETmekaPaHBdbaiavfawUdbkazclfhzaxcxfhxalaHcefgH9hmbkkJbbbbhwdnarTmbinaiIdbgCawawaC9DEhwaiclfhiarcufgrmbkkakcd4akfhOcehiinaigvcethiavaO6mbkcbhiaqcuavcdtgOavcFFFFi0Ecbyd1:jjjbHjjjjbbgzBdyazcFeaOz:rjjjbhPdnadTmbavcufhAcbhrcbhxindnaXaeaxcdtfgvydbcdtfydbgiaXavclfydbcdtfydbgOSmbaiaXavcwfydbcdtfydbgvSmbaOavSmbasavcdtfydbhHdndnasaOcdtfydbgvasaicdtfydbgi9pmbavaH9pmbaHhlaihoavhHxekdnaHai9pmbaHav9pmbaihlavhoxekavhlaHhoaihHkabarcx2fgvaHBdbavcwfaoBdbavclfalBdbdnaPaoc:3F;N8N2alc:F:b:DD27aHc;D;O:B8J27aAGgOcdtfgvydbgicuSmbcehzinazhvdnabaicx2fgiydbaH9hmbaiydlal9hmbaiydwaoSmikavcefhzaPaOavfaAGgOcdtfgvydbgicu9hmbkkavarBdbarcefhrkaxcifgxad6mbkarci2hikdnaDmbcwhvxdkaw:rhwcwhvkaDawUdbkavcdthvdninavTmeavc98fgvaqcxffydbcbyd:m:jjjbH:bjjjbbxbkkaqc;Wbf8Kjjjjbaik:2ldwue9:8Jjjjjbc;Wb9Rgr8Kjjjjbcbhwarcxfcbc;Kbz:rjjjb8AdnabaeSmbabaeadcdtz:qjjjb8AkarcualcdtalcFFFFi0EgDcbyd1:jjjbHjjjjbbgqBdxarceBd2aqcbaialavcbarcxfz:djjjbcualcx2alc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbhkarcxfaryd2gxcdtgmfakBdbaraxcefgPBd2akaialavcbcbz:ejjjb8AarcxfaPcdtfaDcbyd1:jjjbHjjjjbbgvBdbaraxcdfgiBd2arcxfaicdtfcuavalaeadaqz:fjjjbgecltaecjjjjiGEcbyd1:jjjbHjjjjbbgiBdbaiaeavakalz:gjjjbdnadTmbaoaoNhocbhwabhlcbhkindnaiavalydbgecdtfydbcdtfIdbao9ETmbalclf8PdbhsabawcdtfgqaeBdbaqclfas83dbawcifhwkalcxfhlakcifgkad6mbkkaxcifhlamarcxffcwfhkdninalTmeakydbcbyd:m:jjjbH:bjjjbbakc98fhkalcufhlxbkkarc;Wbf8Kjjjjbawk:FCoDud99rue99iul998Jjjjjbc;Wb9Rgw8KjjjjbdndnarmbcbhDxekawcxfcbc;Kbz:rjjjb8Aawcuadcx2adc;v:Q;v:Qe0Ecbyd1:jjjbHjjjjbbgqBdxawceBd2aqaeadaicbcbz:ejjjb8AawcuadcdtadcFFFFi0Egkcbyd1:jjjbHjjjjbbgxBdzawcdBd2adcd4adfhmceheinaegicetheaiam6mbkcbhPawcuaicdtgsaicFFFFi0Ecbyd1:jjjbHjjjjbbgzBdCawciBd2dndnar:ZgH:rJbbbZMgO:lJbbb9p9DTmbaO:Ohexekcjjjj94hekaicufhAc:bwhmcbhCadhXcbhQinaChLaeamgKcufaeaK9iEaPgDcefaeaD9kEhYdndnadTmbaYcuf:YhOaqhiaxheadhmindndnaiIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdbaONJbbbZMg8A:lJbbb9p9DTmba8A:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:rjjjbh3cbh5cbhPindna3axaPcdtfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbaeaCSmbcehiina3amaifaAGgmcdtfgEydbgecuSmeaicefhiaeaC9hmbkkaEaCBdba5aecuSfh5aPcefgPad9hmbxdkkazcFeasz:rjjjb8Acbh5kaDaYa5ar0giEhPaLa5aiEhCdna5arSmbaYaKaiEgmaP9Rcd9imbdndnaQcl0mbdnaX:ZgOaL:Zg8A:taY:Yg8EaD:Y:tg8Fa8EaK:Y:tgaa5:ZghaH:tNNNaOaH:taaNa8Aah:tNa8AaH:ta8FNahaO:tNM:va8EMJbbbZMgO:lJbbb9p9DTmbaO:Ohexdkcjjjj94hexekaPamfcd9Theka5aXaiEhXaQcefgQcs9hmekkdndnaCmbcihicbhDxekcbhiawakcbyd1:jjjbHjjjjbbg5BdKawclBd2aPcuf:Yh8AdndnadTmbaqhiaxheadhmindndnaiIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhCxekcjjjj94hCkaCcCthCdndnaiclfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaEcqtaCVhCdndnaicwfIdba8ANJbbbZMgO:lJbbb9p9DTmbaO:OhExekcjjjj94hEkaeaCaEVBdbaicxfhiaeclfheamcufgmmbkazcFeasz:rjjjbh3cbhDcbhYindndndna3axaYcdtgKfydbgCcm4aC7c:v;t;h;Ev2gics4ai7aAGgmcdtfgEydbgecuSmbcehiinaxaecdtgefydbaCSmdamaifheaicefhia3aeaAGgmcdtfgEydbgecu9hmbkkaEaYBdbaDhiaDcefhDxeka5aefydbhika5aKfaiBdbaYcefgYad9hmbkcuaDc32giaDc;j:KM;jb0EhexekazcFeasz:rjjjb8AcbhDcbhekawaecbyd1:jjjbHjjjjbbgeBd3awcvBd2aecbaiz:rjjjbhEavcd4hKdnadTmbdnalTmbaKcdth3a5hCaqhealhmadhAinaEaCydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiamIdbaiIdxMUdxaiamclfIdbaiIdzMUdzaiamcwfIdbaiIdCMUdCaiaiIdKJbbjZMUdKaCclfhCaecxfheama3fhmaAcufgAmbxdkka5hmaqheadhCinaEamydbc32fgiaeIdbaiIdbMUdbaiaeclfIdbaiIdlMUdlaiaecwfIdbaiIdwMUdwaiaiIdxJbbbbMUdxaiaiIdzJbbbbMUdzaiaiIdCJbbbbMUdCaiaiIdKJbbjZMUdKamclfhmaecxfheaCcufgCmbkkdnaDTmbaEhiaDheinaiaiIdbJbbbbJbbjZaicKfIdbgO:vaOJbbbb9BEgONUdbaiclfgmaOamIdbNUdbaicwfgmaOamIdbNUdbaicxfgmaOamIdbNUdbaiczfgmaOamIdbNUdbaicCfgmaOamIdbNUdbaic3fhiaecufgembkkcbhCawcuaDcdtgYaDcFFFFi0Egicbyd1:jjjbHjjjjbbgeBdaawcoBd2awaicbyd1:jjjbHjjjjbbg3Bd8KaecFeaYz:rjjjbhxdnadTmbJbbjZJbbjZa8A:vaPceSEaoNgOaONh8AaKcdthPalheina8Aaec;81jjbalEgmIdwaEa5ydbgAc32fgiIdC:tgOaONamIdbaiIdx:tgOaONamIdlaiIdz:tgOaONMMNaqcwfIdbaiIdw:tgOaONaqIdbaiIdb:tgOaONaqclfIdbaiIdl:tgOaONMMMhOdndnaxaAcdtgifgmydbcuSmba3aifIdbaO9ETmekamaCBdba3aifaOUdbka5clfh5aqcxfhqaeaPfheadaCcefgC9hmbkkabaxaYz:qjjjb8AcrhikaicdthiinaiTmeaic98fgiawcxffydbcbyd:m:jjjbH:bjjjbbxbkkawc;Wbf8KjjjjbaDk:Ydidui99ducbhi8Jjjjjbca9Rglczfcwfcbyd11jjbBdbalcb8Pdj1jjb83izalcwfcbydN1jjbBdbalcb8Pd:m1jjb83ibdndnaembJbbjFhvJbbjFhoJbbjFhrxekadcd4cdthwincbhdinalczfadfgDabadfIdbgvaDIdbgoaoav9EEUdbaladfgDavaDIdbgoaoav9DEUdbadclfgdcx9hmbkabawfhbaicefgiae9hmbkalIdwalIdK:thralIdlalIdC:thoalIdbalIdz:thvkJbbbbavavJbbbb9DEgvaoaoav9DEgvararav9DEk9DeeuabcFeaicdtz:rjjjbhlcbhbdnadTmbindnalaeydbcdtfgiydbcu9hmbaiabBdbabcefhbkaeclfheadcufgdmbkkabk9teiucbcbyd:q:jjjbgeabcifc98GfgbBd:q:jjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik;teeeudndnaeabVciGTmbabhixekdndnadcz9pmbabhixekabhiinaiaeydbBdbaiaeydlBdlaiaeydwBdwaiaeydxBdxaeczfheaiczfhiadc9Wfgdcs0mbkkadcl6mbinaiaeydbBdbaeclfheaiclfhiadc98fgdci0mbkkdnadTmbinaiaeRbb86bbaicefhiaecefheadcufgdmbkkabk:3eedudndnabciGTmbabhixekaecFeGc:b:c:ew2hldndnadcz9pmbabhixekabhiinaialBdxaialBdwaialBdlaialBdbaiczfhiadc9Wfgdcs0mbkkadcl6mbinaialBdbaiclfhiadc98fgdci0mbkkdnadTmbinaiae86bbaicefhiadcufgdmbkkabk9teiucbcbyd:q:jjjbgeabcrfc94GfgbBd:q:jjjbdndnabZbcztgd9nmbcuhiabad9RcFFifcz4nbcuSmekaehikaik9:eiuZbhedndncbyd:q:jjjbgdaecztgi9nmbcuheadai9RcFFifcz4nbcuSmekadhekcbabae9Rcifc98Gcbyd:q:jjjbfgdBd:q:jjjbdnadZbcztge9nmbadae9RcFFifcz4nb8Akkk:Iedbcjwk1eFFuuFFuuFFuuFFuFFFuFFFuFbbbbbbbbebbbdbbbbbbbebbbebbbdbbbbbbbbbbbeeeeebebbebbebebbbeebbbbbbbbbbbbeeebeebebbeeebebbbbbebebbbbbbbbbbbbbbbbbbc1Dkxebbbdbbb:GNbb'; // embed! wasm

	var wasmpack = new Uint8Array([
		32, 0, 65, 2, 1, 106, 34, 33, 3, 128, 11, 4, 13, 64, 6, 253, 10, 7, 15, 116, 127, 5, 8, 12, 40, 16, 19, 54, 20, 9, 27, 255, 113, 17, 42, 67,
		24, 23, 146, 148, 18, 14, 22, 45, 70, 69, 56, 114, 101, 21, 25, 63, 75, 136, 108, 28, 118, 29, 73, 115,
	]);

	if (typeof WebAssembly !== 'object') {
		return {
			supported: false,
		};
	}

	var instance;

	var ready = WebAssembly.instantiate(unpack(wasm), {}).then(function (result) {
		instance = result.instance;
		instance.exports.__wasm_call_ctors();
	});

	function unpack(data) {
		var result = new Uint8Array(data.length);
		for (var i = 0; i < data.length; ++i) {
			var ch = data.charCodeAt(i);
			result[i] = ch > 96 ? ch - 97 : ch > 64 ? ch - 39 : ch + 4;
		}
		var write = 0;
		for (var i = 0; i < data.length; ++i) {
			result[write++] = result[i] < 60 ? wasmpack[result[i]] : (result[i] - 60) * 64 + result[++i];
		}
		return result.buffer.slice(0, write);
	}

	function assert(cond) {
		if (!cond) {
			throw new Error('Assertion failed');
		}
	}

	function bytes(view) {
		return new Uint8Array(view.buffer, view.byteOffset, view.byteLength);
	}

	function reorder(fun, indices, vertices) {
		var sbrk = instance.exports.sbrk;
		var ip = sbrk(indices.length * 4);
		var rp = sbrk(vertices * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		var indices8 = bytes(indices);
		heap.set(indices8, ip);
		var unique = fun(rp, ip, indices.length, vertices);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var remap = new Uint32Array(vertices);
		new Uint8Array(remap.buffer).set(heap.subarray(rp, rp + vertices * 4));
		indices8.set(heap.subarray(ip, ip + indices.length * 4));
		sbrk(ip - sbrk(0));

		for (var i = 0; i < indices.length; ++i) indices[i] = remap[indices[i]];

		return [remap, unique];
	}

	function maxindex(source) {
		var result = 0;
		for (var i = 0; i < source.length; ++i) {
			var index = source[i];
			result = result < index ? index : result;
		}
		return result;
	}

	function simplify(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_index_count, target_error, options) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_index_count, target_error, options, te);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyAttr(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_attributes,
		vertex_attributes_stride,
		attribute_weights,
		vertex_lock,
		target_index_count,
		target_error,
		options
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sa = sbrk(vertex_count * vertex_attributes_stride);
		var sw = sbrk(attribute_weights.length * 4);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(vertex_attributes), sa);
		heap.set(bytes(attribute_weights), sw);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(
			ti,
			si,
			index_count,
			sp,
			vertex_count,
			vertex_positions_stride,
			sa,
			vertex_attributes_stride,
			sw,
			attribute_weights.length,
			vl,
			target_index_count,
			target_error,
			options,
			te
		);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyUpdate(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_attributes,
		vertex_attributes_stride,
		attribute_weights,
		vertex_lock,
		target_index_count,
		target_error,
		options
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sa = sbrk(vertex_count * vertex_attributes_stride);
		var sw = sbrk(attribute_weights.length * 4);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(vertex_attributes), sa);
		heap.set(bytes(attribute_weights), sw);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(
			si,
			index_count,
			sp,
			vertex_count,
			vertex_positions_stride,
			sa,
			vertex_attributes_stride,
			sw,
			attribute_weights.length,
			vl,
			target_index_count,
			target_error,
			options,
			te
		);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		bytes(indices).set(heap.subarray(si, si + result * 4));
		bytes(vertex_positions).set(heap.subarray(sp, sp + vertex_count * vertex_positions_stride));
		bytes(vertex_attributes).set(heap.subarray(sa, sa + vertex_count * vertex_attributes_stride));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [result, error[0]];
	}

	function simplifyScale(fun, vertex_positions, vertex_count, vertex_positions_stride) {
		var sbrk = instance.exports.sbrk;
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		var result = fun(sp, vertex_count, vertex_positions_stride);
		sbrk(sp - sbrk(0));
		return result;
	}

	function simplifyPoints(
		fun,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_colors,
		vertex_colors_stride,
		color_weight,
		target_vertex_count
	) {
		var sbrk = instance.exports.sbrk;
		var ti = sbrk(target_vertex_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var sc = sbrk(vertex_count * vertex_colors_stride);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		if (vertex_colors) {
			heap.set(bytes(vertex_colors), sc);
		}
		var result = fun(ti, sp, vertex_count, vertex_positions_stride, sc, vertex_colors_stride, color_weight, target_vertex_count);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		sbrk(ti - sbrk(0));
		return target;
	}

	function simplifySloppy(
		fun,
		indices,
		index_count,
		vertex_positions,
		vertex_count,
		vertex_positions_stride,
		vertex_lock,
		target_index_count,
		target_error
	) {
		var sbrk = instance.exports.sbrk;
		var te = sbrk(4);
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var vl = vertex_lock ? sbrk(vertex_count) : 0;
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		if (vertex_lock) {
			heap.set(bytes(vertex_lock), vl);
		}
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, vl, target_index_count, target_error, te);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		var error = new Float32Array(1);
		bytes(error).set(heap.subarray(te, te + 4));
		sbrk(te - sbrk(0));
		return [target, error[0]];
	}

	function simplifyPrune(fun, indices, index_count, vertex_positions, vertex_count, vertex_positions_stride, target_error) {
		var sbrk = instance.exports.sbrk;
		var ti = sbrk(index_count * 4);
		var sp = sbrk(vertex_count * vertex_positions_stride);
		var si = sbrk(index_count * 4);
		var heap = new Uint8Array(instance.exports.memory.buffer);
		heap.set(bytes(vertex_positions), sp);
		heap.set(bytes(indices), si);
		var result = fun(ti, si, index_count, sp, vertex_count, vertex_positions_stride, target_error);
		// heap may have grown
		heap = new Uint8Array(instance.exports.memory.buffer);
		var target = new Uint32Array(result);
		bytes(target).set(heap.subarray(ti, ti + result * 4));
		sbrk(ti - sbrk(0));
		return target;
	}

	var simplifyOptions = {
		LockBorder: 1,
		Sparse: 2,
		ErrorAbsolute: 4,
		Prune: 8,
		Regularize: 16,
		_InternalDebug: 1 << 30, // internal, don't use!
	};

	return {
		ready: ready,
		supported: true,

		compactMesh: function (indices) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			return reorder(instance.exports.meshopt_optimizeVertexFetchRemap, indices32, maxindex(indices) + 1);
		},

		simplify: function (indices, vertex_positions, vertex_positions_stride, target_index_count, target_error, flags) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplify(
				instance.exports.meshopt_simplify,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				target_index_count,
				target_error,
				options
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyWithAttributes: function (
			indices,
			vertex_positions,
			vertex_positions_stride,
			vertex_attributes,
			vertex_attributes_stride,
			attribute_weights,
			vertex_lock,
			target_index_count,
			target_error,
			flags
		) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_attributes instanceof Float32Array);
			assert(vertex_attributes.length == vertex_attributes_stride * (vertex_positions.length / vertex_positions_stride));
			assert(vertex_attributes_stride >= 0);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);
			assert(Array.isArray(attribute_weights));
			assert(vertex_attributes_stride >= attribute_weights.length);
			assert(attribute_weights.length <= 32);
			for (var i = 0; i < attribute_weights.length; ++i) {
				assert(attribute_weights[i] >= 0);
			}

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyAttr(
				instance.exports.meshopt_simplifyWithAttributes,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_attributes,
				vertex_attributes_stride * 4,
				new Float32Array(attribute_weights),
				vertex_lock ? new Uint8Array(vertex_lock) : null,
				target_index_count,
				target_error,
				options
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyWithUpdate: function (
			indices,
			vertex_positions,
			vertex_positions_stride,
			vertex_attributes,
			vertex_attributes_stride,
			attribute_weights,
			vertex_lock,
			target_index_count,
			target_error,
			flags
		) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_attributes instanceof Float32Array);
			assert(vertex_attributes.length == vertex_attributes_stride * (vertex_positions.length / vertex_positions_stride));
			assert(vertex_attributes_stride >= 0);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);
			assert(Array.isArray(attribute_weights));
			assert(vertex_attributes_stride >= attribute_weights.length);
			assert(attribute_weights.length <= 32);
			for (var i = 0; i < attribute_weights.length; ++i) {
				assert(attribute_weights[i] >= 0);
			}

			var options = 0;
			for (var i = 0; i < (flags ? flags.length : 0); ++i) {
				assert(flags[i] in simplifyOptions);
				options |= simplifyOptions[flags[i]];
			}

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyUpdate(
				instance.exports.meshopt_simplifyWithUpdate,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_attributes,
				vertex_attributes_stride * 4,
				new Float32Array(attribute_weights),
				vertex_lock ? new Uint8Array(vertex_lock) : null,
				target_index_count,
				target_error,
				options
			);
			if (indices !== indices32) {
				// copy back indices if they were converted to Uint32Array
				for (var i = 0; i < result[0]; ++i) {
					indices[i] = indices32[i];
				}
			}
			return result;
		},

		getScale: function (vertex_positions, vertex_positions_stride) {
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			return simplifyScale(
				instance.exports.meshopt_simplifyScale,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4
			);
		},

		simplifyPoints: function (vertex_positions, vertex_positions_stride, target_vertex_count, vertex_colors, vertex_colors_stride, color_weight) {
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_vertex_count >= 0 && target_vertex_count <= vertex_positions.length / vertex_positions_stride);
			if (vertex_colors) {
				assert(vertex_colors instanceof Float32Array);
				assert(vertex_colors.length % vertex_colors_stride == 0);
				assert(vertex_colors_stride >= 3);
				assert(vertex_positions.length / vertex_positions_stride == vertex_colors.length / vertex_colors_stride);
				return simplifyPoints(
					instance.exports.meshopt_simplifyPoints,
					vertex_positions,
					vertex_positions.length / vertex_positions_stride,
					vertex_positions_stride * 4,
					vertex_colors,
					vertex_colors_stride * 4,
					color_weight,
					target_vertex_count
				);
			} else {
				return simplifyPoints(
					instance.exports.meshopt_simplifyPoints,
					vertex_positions,
					vertex_positions.length / vertex_positions_stride,
					vertex_positions_stride * 4,
					undefined,
					0,
					0,
					target_vertex_count
				);
			}
		},

		simplifySloppy: function (indices, vertex_positions, vertex_positions_stride, vertex_lock, target_index_count, target_error) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(vertex_lock == null || vertex_lock instanceof Uint8Array);
			assert(vertex_lock == null || vertex_lock.length == vertex_positions.length / vertex_positions_stride);
			assert(target_index_count >= 0 && target_index_count <= indices.length);
			assert(target_index_count % 3 == 0);
			assert(target_error >= 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifySloppy(
				instance.exports.meshopt_simplifySloppy,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				vertex_lock ? new Uint8Array(vertex_lock) : null,
				target_index_count,
				target_error
			);
			result[0] = indices instanceof Uint32Array ? result[0] : new indices.constructor(result[0]);

			return result;
		},

		simplifyPrune: function (indices, vertex_positions, vertex_positions_stride, target_error) {
			assert(
				indices instanceof Uint32Array || indices instanceof Int32Array || indices instanceof Uint16Array || indices instanceof Int16Array
			);
			assert(indices.length % 3 == 0);
			assert(vertex_positions instanceof Float32Array);
			assert(vertex_positions.length % vertex_positions_stride == 0);
			assert(vertex_positions_stride >= 3);
			assert(target_error >= 0);

			var indices32 = indices.BYTES_PER_ELEMENT == 4 ? indices : new Uint32Array(indices);
			var result = simplifyPrune(
				instance.exports.meshopt_simplifyPrune,
				indices32,
				indices.length,
				vertex_positions,
				vertex_positions.length / vertex_positions_stride,
				vertex_positions_stride * 4,
				target_error
			);
			result = indices instanceof Uint32Array ? result : new indices.constructor(result);

			return result;
		},
	};
})();

export { MeshoptSimplifier };
